{
	"info": {
		"_postman_id": "396c9a8e-e104-4846-937d-b716660ab33e",
		"name": "Simple Library API",
		"description": "# 🚀 Implementación de la Colección \"Simple Library API\" en Postman\n\n## Pasos para la Implementación\n\n### 1\\. Configurar Variables\n\nEs crucial que configures la variable `base_url` para que apunte a tu entorno de desarrollo. Para hacerlo:\n\n- Ve a la pestaña \"Variables\" en la colección.\n    \n- Asegúrate de que el valor de `base_url` esté configurado correctamente (por ejemplo, `http://localhost:8000`).\n    \n\n### 2\\. Enviar Solicitudes\n\nLa colección incluye varias solicitudes que puedes utilizar para interactuar con la API. Aquí hay un resumen de las principales solicitudes que deberías probar:\n\n#### **Libros**\n\n- **Obtener todos los libros**: Envía una solicitud GET a `{{base_url}}/api/v1/books`.\n    \n- **Obtener libro por ID**: Envía una solicitud GET a `{{base_url}}/api/v1/books/{id}`.\n    \n- **Crear un libro**: Envía una solicitud POST a `{{base_url}}/api/v1/books` con el siguiente cuerpo en formato JSON:\n    \n    ``` json\n      {\n          \"title\": \"Título del libro\",\n          \"author\": \"Autor del libro\",\n          \"bookCode\": \"Código del libro\",\n          \"publishedDate\": \"Fecha de publicación\"\n      }\n    \n     ```\n    \n- **Actualizar libro por ID**: Envía una solicitud PUT a `{{base_url}}/api/v1/books/{id}` con el cuerpo en formato JSON.\n    \n- **Eliminar libro por ID**: Envía una solicitud DELETE a `{{base_url}}/api/v1/books/{id}`.\n    \n\n#### **Bibliotecas**\n\n- **Obtener todas las bibliotecas**: Envía una solicitud GET a `{{base_url}}/api/v1/libraries`.\n    \n- **Crear una biblioteca**: Envía una solicitud POST a `{{base_url}}/api/v1/libraries` con el siguiente cuerpo en formato JSON:\n    \n    ``` json\n      {\n          \"name\": \"Nombre de la biblioteca\",\n          \"location\": \"Ubicación de la biblioteca\",\n          \"books\": [\n              {\n                  \"title\": \"Título del libro\",\n                  \"author\": \"Autor del libro\",\n                  \"bookCode\": \"Código del libro\",\n                  \"publishedDate\": \"Fecha de publicación\"\n              }\n          ]\n      }\n    \n     ```\n    \n- **Actualizar biblioteca por ID**: Envía una solicitud PUT a `{{base_url}}/api/v1/libraries/{id}` con el cuerpo en formato JSON.\n    \n- **Eliminar biblioteca por ID**: Envía una solicitud DELETE a `{{base_url}}/api/v1/libraries/{id}`.\n    \n\n#### **Miembros**\n\n- **Obtener todos los miembros**: Envía una solicitud GET a `{{base_url}}/api/v1/members`.\n    \n- **Crear un miembro**: Envía una solicitud POST a `{{base_url}}/api/v1/members` con el siguiente cuerpo en formato JSON:\n    \n    ``` json\n      {\n          \"firstName\": \"Nombre\",\n          \"lastName\": \"Apellido\",\n          \"email\": \"correo@example.com\",\n          \"membershipId\": \"ID del miembro\"\n      }\n    \n     ```\n    \n- **Actualizar miembro por ID**: Envía una solicitud PUT a `{{base_url}}/api/v1/members/{id}` con el cuerpo en formato JSON.\n    \n- **Eliminar miembro por ID**: Envía una solicitud DELETE a `{{base_url}}/api/v1/members/{id}`.\n    \n\n### 3\\. Verificar Respuestas\n\nDespués de enviar las solicitudes, verifica las respuestas en la pestaña \"Respuesta\" de Postman. Asegúrate de que los códigos de estado sean los esperados (200, 201, 204, 404, 500) y que los datos devueltos sean correctos.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38100386"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Get books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"books"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get book by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/books/7e739bcd-dde1-4078-ac06-1da39a321cc5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"7e739bcd-dde1-4078-ac06-1da39a321cc5"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get book by Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/books/status/BORROWED",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"status",
								"BORROWED"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n    \"title\": \"Shadows of Time\",\n    \"author\": \"Eleanor Whitman\",\n    \"bookCode\": \"ST004\",\n    \"publishedDate\": \"2023-12-10T00:00:00.000Z\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"books"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update book by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"Laura López\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/books/9da3baed-a544-4cec-9836-2dcc55d32ea8",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"9da3baed-a544-4cec-9836-2dcc55d32ea8"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete book by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/books/d565a27b-6e7f-41ad-9193-bd7955737b33",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"books",
								"d565a27b-6e7f-41ad-9193-bd7955737b33"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Libraries",
			"item": [
				{
					"name": "Get libraries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/libraries",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"libraries"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get library by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/libraries/c30ab248-8931-49f0-8350-c8f2bb409059",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"libraries",
								"c30ab248-8931-49f0-8350-c8f2bb409059"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"El Faro del Saber\",\n    \"location\": \"Santiago, Chile\",\n    \"books\": [\n      {\n        \"title\": \"El Guardián de la Luna\",\n        \"author\": \"Ricardo Vallejo\",\n        \"bookCode\": \"EGM003\",\n        \"publishedDate\": \"2019-02-20T00:00:00.000Z\"\n      }\n    ]\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/libraries/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"libraries",
								""
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update library by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"books\": [\"7e739bcd-dde1-4078-ac06-1da39a321cc5\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/libraries/c30ab248-8931-49f0-8350-c8f2bb409059",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"libraries",
								"c30ab248-8931-49f0-8350-c8f2bb409059"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete library by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/libraries/82b93316-54c3-4008-93f9-d862f50f622c",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"libraries",
								"82b93316-54c3-4008-93f9-d862f50f622c"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Members",
			"item": [
				{
					"name": "Get members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"members"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get member by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/members/02bbf1de-76f0-497a-939d-28a58b8516ad",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"02bbf1de-76f0-497a-939d-28a58b8516ad"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Luna\",\n    \"lastName\": \"Montenegro\",\n    \"email\": \"luna.montenegro@example.com\",\n    \"membershipCode\": \"MEM13579\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"members"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update member by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"Franco\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/members/7df1d0be-9f07-490e-8b4e-83c845c8798e",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"7df1d0be-9f07-490e-8b4e-83c845c8798e"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete member by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/v1/members/9c97919e-2cea-4f48-a0b6-5c9bd8ae96ce",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"members",
								"9c97919e-2cea-4f48-a0b6-5c9bd8ae96ce"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		}
	]
}